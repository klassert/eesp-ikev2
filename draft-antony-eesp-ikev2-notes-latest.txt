



IPSECME Working Group                                        S. Klassert
Internet-Draft                                                 A. Antony
Intended status: Informational                                   secunet
Expires: 24 July 2025                                    20 January 2025


                 Notes on IKEv2 Key Derivation Function
                    draft-antony-eesp-ikev2-notes-00

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 24 July 2025.

Copyright Notice

   Copyright (c) 2025 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
   2.  KDF methods . . . . . . . . . . . . . . . . . . . . . . . . .   2
     2.1.  Hardware friendly prf . . . . . . . . . . . . . . . . . .   3
     2.2.  KDF References  . . . . . . . . . . . . . . . . . . . . .   4
   3.  UDP Encap . . . . . . . . . . . . . . . . . . . . . . . . . .   5
     3.1.  Use cases for UDP Encapsulation without NAT . . . . . . .   5



Klassert & Antony         Expires 24 July 2025                  [Page 1]

Internet-Draft               KEv2 KDF Notes                 January 2025


       3.1.1.  UDP Encapsulation in Cloud Provider . . . . . . . . .   5
   4.  WESP UDP Encap  . . . . . . . . . . . . . . . . . . . . . . .   6
   5.  UDP pot sharing on Linux  . . . . . . . . . . . . . . . . . .   6
   6.  Normative References  . . . . . . . . . . . . . . . . . . . .   6
   7.  Informative References  . . . . . . . . . . . . . . . . . . .   7
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  10

1.  Introduction

   These are notes on EESP IKEv2 and other EESP related information.  To
   keep it in one place for quick access.

2.  KDF methods

   IKEv2 key derivation, [RFC7296], is likely 'KDF in Feedback Mode'
   specified in [NIST800-108] and [RFC5869].  This the iterative method
   in Section 2.13 [RFC7296]

   In the following, | indicates concatenation.  prf+ is defined as:
   prf+ (K,S) = T1 | T2 | T3 | T4 | ...

   where: T1 = prf (K, S | 0x01)

   T2 = prf (K, T1 | S | 0x02)

   T3 = prf (K, T2 | S | 0x03)

   T4 = prf (K, T3 | S | 0x04)

   ...

   Section 2.14 of [RFC7296] which defined HMAC expansion of SKEYSEED

   SKEYSEED = prf(Ni | Nr, g^ir)

   IKEv2 key derivation has two setps.  Above is the first step and next
   key expansion using prf+.

   {SK_d | SK_ai | SK_ar | SK_ei | SK_er | SK_pi | SK_pr} = prf+
   (SKEYSEED, Ni | Nr | SPIi | SPIr)

   (indicating that the quantities SK_d, SK_ai, SK_ar, SK_ei, SK_er,
   SK_pi, and SK_pr are taken in order from the generated bits of the
   prf+).  g^ir is the shared secret from the ephemeral Diffie-Hellman
   exchange.  g^ir is represented as a string of octets in big endian
   order padded with zeros if necessary to make it the length of the
   modulus.  Ni and Nr are the nonces, stripped of any headers.




Klassert & Antony         Expires 24 July 2025                  [Page 2]

Internet-Draft               KEv2 KDF Notes                 January 2025


   KEYMAT = prf+(SK_d, Ni | Nr)

   Where Ni and Nr are the nonces from the IKE_SA_INIT exchange if this
   request is the first Child SA created or the fresh Ni and Nr from the
   CREATE_CHILD_SA exchange if this is a subsequent creation.

   For CREATE_CHILD_SA exchanges including an optional Diffie-Hellman
   exchange, the keying material is defined as:

   KEYMAT = prf+(SK_d, g^ir (new) | Ni | Nr)

   where g^ir (new) is the shared secret from the ephemeral Diffie-
   Hellman exchange of this CREATE_CHILD_SA exchange (represented as an
   octet string in big endian order padded with zeros in the high-order
   bits if necessary to make it the length of the modulus).

   What EESP IKEv2 proposing as 'Heirarchial key derivation' NIST800-108
   defines 'Key Hierarchy'

   In Section 5.4 of Key Management for Multicast [RFC2627] a Logical
   Key Hierarchy (LKH).  I din't follow that completly.  It is refered
   in G-IKEv2.

2.1.  Hardware friendly prf

   Current IKEv2 IANA registry,[IKEv2-prf], specifies very few hardware
   friendly Pseudorandom Function Transforms.  And IETF recmendations
   [RFC8247] has only PRF_AES128_XCBC.

   Hardware friendly prf and prf+ are limited to maximum strength of 128
   bits!  While the SHA2 does not have this limit.  This comes from the
   limit of input and output block of AES underlying structure.  Input
   is 128 bit and output are 128bits, even when using a 256 bit key.
   Hence the overall strength when using AES as prf would reduce to
   128bit.

   In practice many cloud providers appears to be using more hardware
   friendly PRF, such as AES-CMAC-128 by [PSP] and very likely AES-CTR
   by Amazon AWS.  Any public citations of AWS PRF?  I deduced AES-CTR
   from their comment to [NIST-800-108-comments].

   Section 2.14 of [RFC7296] "If the negotiated PRF is AES-XCBC-PRF-128
   [RFC4434] or AES-CMAC-PRF-128 [RFC4615], only the first 64 bits of Ni
   and the first 64 bits of Nr are used in calculating SKEYSEED, but all
   the bits are used for input to the prf+ function."  When using AES-
   XCBC-PRF-128 AES-CMAC-PRF-128 the SKEYSEED will be 128bits long.  It
   seems for that reason AES-CMAC-PRF-256 is not standardized?




Klassert & Antony         Expires 24 July 2025                  [Page 3]

Internet-Draft               KEv2 KDF Notes                 January 2025


   TLS 1.3, Appendix B of [RFC8446] lst HASH.  It need a minimum 256 bit
   output, currently supports SHA256 and SHA384, a.k.a.  HASH, HKDF.
   e.g.  TLS_AES_128_GCM_SHA256 TLS_AES_256_GCM_SHA384.

2.2.  KDF References

   [I-D.mattsson-cfrg-aes-gcm-sst] seems to be deriving per packet keys
   for GCM.  This is an interesting work in cfrg and it is also proposed
   to NIST.  I think their work will keep the IKEv2 prf and prf+ as it
   is just another layer of HKDF using the AEAD interface specified to
   [RFC5116], which widely reffered API.  So any existing implementation
   that support RFC5116 would be compaitable with GCM SST proposal.  I
   only had qunck glance, so I am not 100% sure yet!

   TLS 1.3[RFC8446] use hkdf and their reference Krawczyk, H.,
   "Cryptographic Extraction and Key Derivation: The HKDF Scheme",
   Proceedings of CRYPTO 2010, August 2010,
   https://eprint.iacr.org/2010/264.

   IETF CFRG is working requirements of AEAD
   [I-D.irtf-cfrg-aead-properties] They decided not discuss AEAD as PRF?
   This is sad news not to specifiy use of same hardware primitive as a
   PRF for high performance IPsec implimenation.

   CFRG discusions point out ChaCha20oly1305 [RFC7539] is not a PRF!
   This points to a reson when using AEAD the underlying crypto
   operation is used for XOF.  Even when the tag 256 bit AES output is
   128bits.  While there is also a suggestion ChaCha20 is better that
   AES?

   Discussion of [I-D.irtf-cfrg-aead-properties]
   https://mailarchive.ietf.org/arch/search/?q=draft-irtf-cfrg-aead-
   properties%20PRF

   Their argument is when using a 128bit primitive as PRF it's estimated
   Birthday Attack strength is 128bits.  Could this be fixed by using
   two rounds like PSP did and concatinate it for prf, may be but this
   need be part of IKEv2.  To propose as part of section 2.14

   Another possibly related work in cfrg, but for hardware wallets, I.D-
   dijkhuis-cfrg-hdkeys

   IPsecME discussion arguing AES based PRFs would have max 128bit
   entropy. https://mailarchive.ietf.org/arch/msg/ipsec/
   Tz4xsjmEHH57jvdMS9pqSFnGbwc/






Klassert & Antony         Expires 24 July 2025                  [Page 4]

Internet-Draft               KEv2 KDF Notes                 January 2025


   NIST is coming up with a modern AEAD.  The winner is [ASCON] in 2024.
   The inventors envsions that AEAD as a PRF.  However, only ASCON 128.
   I found it odd this one only support 128 bit tags.  Then we are back
   to the same argument as this is not good enough for IKEv2 PRF.  May
   be because NIST called it light weight crypto:) We need one for
   400Gbps too.  A hardware NIC looks like an IoT.

3.  UDP Encap

   Why UDP?

   *  For Roadwarrior: IPv4 home gateway.

   *  Why Datacenters, without NAT, using UDP?  [Tero] This is a failure
      for a new protocol.

   *  In the Cloud per flow limitation, without NAT

   *  Wide spread RSS Support for UDP when using RFC9611

3.1.  Use cases for UDP Encapsulation without NAT

3.1.1.  UDP Encapsulation in Cloud Provider

   A common question is why use UDP when there is no NAT, especially in
   cloud environments or why vary UDP source ports for when using
   multiple SA such as [RFC9681]].

   Cloud providers often enforce bandwidth limits per flow between nodes
   or to external endpoints.  A flow is defined by a 5-tuple: protocol,
   local IP, remote IP, local port, and remote port.  ESP (and likely
   EESP) lacks port numbers, unlike UDP or TCP, so it is identified only
   by its local and remote IPs.  This causes ESP traffic to be treated
   as one flow, leading to strict bandwidth limits.

   These limits can severely impact IPsec throughput between peers,
   especially when using [RFC9611].

   A practical solution is to encapsulate ESP in UDP.  By varying the
   UDP source port based on inner flow characteristics, traffic can be
   spread across multiple flows.  This bypasses bandwidth restrictions
   and improves throughput.  Test results supporting this were presented
   in [AWS-IPsec-NetDev].

   For further details, see: [Azure-Network]

   [AWS-Network]




Klassert & Antony         Expires 24 July 2025                  [Page 5]

Internet-Draft               KEv2 KDF Notes                 January 2025


   [GCP-Network]

4.  WESP UDP Encap

   [RFC5840] WESP has the same issue, because they re-use destination
   port 4500.  WESP-in-UP add additoonal 32 bits, SPI 0x2, to disinguish
   from EESP.  It is 32 bits at the top.  SPI 0x2 is from the reserved
   range SPIs (0-255).  I think, the RFC 5840 also advise not to use the
   first nibble, 4 bits, numbers 4 and 6 could be used by IPv4 or IPv6.

   0                   1                   2                   3
   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |        Src Port (4500)        | Dest Port (4500)              |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |             Length            |          Checksum             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |          Protocol Identifier (value = 0x00000002)             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |  Next Header  |   HdrLen      |  TrailerLen   |    Flags      |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                      Existing ESP Encapsulation               |
   ~                                                               ~
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

              Figure 1: Figure 4: UDP-Encapsulated WESP Header

   EESP could use another spi say 3 as an EESP marker.  However, this 4
   bytes would lead to waste of 4 bytes every EESP packet.

5.  UDP pot sharing on Linux

   On Linux define EESPINUDP, a type socket encapsulation.  It is
   similar to ESPINUDP.  When set this socket will accept IKE packets,
   ESP or EESP packets.  When sharing the same for port EESP and ESP ESP
   SPI the bit 31 should be zero.

6.  Normative References

   [NIST800-108]
              NIST, "Recommendation for Key Derivation Using
              Pseudorandom Functions",
              <https://www.nist.gov/publications/recommendation-key-
              derivation-using-pseudorandom-functions-1>.






Klassert & Antony         Expires 24 July 2025                  [Page 6]

Internet-Draft               KEv2 KDF Notes                 January 2025


   [RFC2627]  Wallner, D., Harder, E., and R. Agee, "Key Management for
              Multicast: Issues and Architectures", RFC 2627,
              DOI 10.17487/RFC2627, June 1999,
              <https://www.rfc-editor.org/info/rfc2627>.

   [RFC3948]  Huttunen, A., Swander, B., Volpe, V., DiBurro, L., and M.
              Stenberg, "UDP Encapsulation of IPsec ESP Packets",
              RFC 3948, DOI 10.17487/RFC3948, January 2005,
              <https://www.rfc-editor.org/info/rfc3948>.

   [RFC4615]  Song, J., Poovendran, R., Lee, J., and T. Iwata, "The
              Advanced Encryption Standard-Cipher-based Message
              Authentication Code-Pseudo-Random Function-128 (AES-CMAC-
              PRF-128) Algorithm for the Internet Key Exchange Protocol
              (IKE)", RFC 4615, DOI 10.17487/RFC4615, August 2006,
              <https://www.rfc-editor.org/info/rfc4615>.

   [RFC5840]  Grewal, K., Montenegro, G., and M. Bhatia, "Wrapped
              Encapsulating Security Payload (ESP) for Traffic
              Visibility", RFC 5840, DOI 10.17487/RFC5840, April 2010,
              <https://www.rfc-editor.org/info/rfc5840>.

   [RFC5869]  Krawczyk, H. and P. Eronen, "HMAC-based Extract-and-Expand
              Key Derivation Function (HKDF)", RFC 5869,
              DOI 10.17487/RFC5869, May 2010,
              <https://www.rfc-editor.org/info/rfc5869>.

   [RFC7296]  Kaufman, C., Hoffman, P., Nir, Y., Eronen, P., and T.
              Kivinen, "Internet Key Exchange Protocol Version 2
              (IKEv2)", STD 79, RFC 7296, DOI 10.17487/RFC7296, October
              2014, <https://www.rfc-editor.org/info/rfc7296>.

   [RFC8247]  Nir, Y., Kivinen, T., Wouters, P., and D. Migault,
              "Algorithm Implementation Requirements and Usage Guidance
              for the Internet Key Exchange Protocol Version 2 (IKEv2)",
              RFC 8247, DOI 10.17487/RFC8247, September 2017,
              <https://www.rfc-editor.org/info/rfc8247>.

7.  Informative References

   [ASCON]    "The Ascon Family: Lightweight Authenticated Encryption,
              Hashing, and More :REF_ORG: Ascon Team",
              <https://csrc.nist.gov/csrc/media/Presentations/2023/the-
              ascon-family/images-media/june-21-mendel-the-ascon-
              family.pdf>.






Klassert & Antony         Expires 24 July 2025                  [Page 7]

Internet-Draft               KEv2 KDF Notes                 January 2025


   [AWS-IPsec-NetDev]
              Amazon AWS, "NetDev Talk : Multi-core IPsec tunnels",
              <https://learn.microsoft.com/en-us/azure/virtual-network/
              virtual-machine-network-throughput>.

   [AWS-Network]
              Amazon AWS, "Google Compute Engine Network bandwidth",
              <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-
              instance-network-bandwidth.html>.

   [Azure-Network]
              Microsoft Azure, "Azure Virtual machine network
              bandwidth", <https://learn.microsoft.com/en-us/azure/
              virtual-network/virtual-machine-network-throughput>.

   [GCM-SST]  "Galois Counter Mode with Secure Short Tags (GCM-SST)
              Slides",
              <https://csrc.nist.gov/csrc/media/Presentations/2023/
              galois-counter-mode-with-secure-short-tags/images-media/
              sess-5-mattsson-bcm-workshop-2023.pdf>.

   [GCM-SST-Paper]
              "Galois Counter Mode with Secure Short Tags (GCM-SST)",
              <https://csrc.nist.gov/csrc/media/Events/2023/third-
              workshop-on-block-cipher-modes-of-operation/documents/
              accepted-papers/Galois%20Counter%20Mode%20with%20Secure%20
              Short%20Tags.pdf>.

   [GCP-Network]
              Google, "Google Compute Engine Network bandwidth",
              <https://cloud.google.com/compute/docs/network-bandwidth>.

   [I-D.ietf-ipsecme-g-ikev2]
              Smyslov, V. and B. Weis, "Group Key Management using
              IKEv2", Work in Progress, Internet-Draft, draft-ietf-
              ipsecme-g-ikev2-20, 16 January 2025,
              <https://datatracker.ietf.org/doc/html/draft-ietf-ipsecme-
              g-ikev2-20>.

   [I-D.irtf-cfrg-aead-properties]
              Bozhko, A., "Properties of AEAD Algorithms", Work in
              Progress, Internet-Draft, draft-irtf-cfrg-aead-properties-
              09, 11 October 2024,
              <https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-
              aead-properties-09>.






Klassert & Antony         Expires 24 July 2025                  [Page 8]

Internet-Draft               KEv2 KDF Notes                 January 2025


   [I-D.mattsson-cfrg-aes-gcm-sst]
              Campagna, M., Maximov, A., and J. P. Mattsson, "Galois
              Counter Mode with Strong Secure Tags (GCM-SST)", Work in
              Progress, Internet-Draft, draft-mattsson-cfrg-aes-gcm-sst-
              16, 13 January 2025,
              <https://datatracker.ietf.org/doc/html/draft-mattsson-
              cfrg-aes-gcm-sst-16>.

   [IKEv2-prf]
              IANA, "IKEv2 Parameters: Extended Sequence Numbers
              Transform IDs", <https://www.iana.org/assignments/ikev2-
              parameters/ikev2-parameters.xhtml#ikev2- parameters-6>.

   [NIST-800-108-comments]
              NIST, "Public Comments and Resolutions on Draft NIST SP
              800-108 Revision 1, Recommendation for Key
              DerivationUsingPseudorandomFunctions, 2020",
              <https://csrc.nist.gov/files/pubs/sp/800/108/r1/final/
              docs/sp800-108r1-draft-comments-resolutions.pdf>.

   [PRGS20]   Technische Universität Ilmenau, "Vector Packet
              Encapsulation: The Case for a Scalable IPsec Encryption
              Protocol", <https://doi.org/10.1145/3407023.3407060>.

   [PSP]      Google, "PSP Architecture Specification",
              <https://github.com/google/psp/blob/main/doc/
              PSP_Arch_Spec.pdf>.

   [RFC4434]  Hoffman, P., "The AES-XCBC-PRF-128 Algorithm for the
              Internet Key Exchange Protocol (IKE)", RFC 4434,
              DOI 10.17487/RFC4434, February 2006,
              <https://www.rfc-editor.org/info/rfc4434>.

   [RFC5116]  McGrew, D., "An Interface and Algorithms for Authenticated
              Encryption", RFC 5116, DOI 10.17487/RFC5116, January 2008,
              <https://www.rfc-editor.org/info/rfc5116>.

   [RFC7539]  Nir, Y. and A. Langley, "ChaCha20 and Poly1305 for IETF
              Protocols", RFC 7539, DOI 10.17487/RFC7539, May 2015,
              <https://www.rfc-editor.org/info/rfc7539>.

   [RFC8446]  Rescorla, E., "The Transport Layer Security (TLS) Protocol
              Version 1.3", RFC 8446, DOI 10.17487/RFC8446, August 2018,
              <https://www.rfc-editor.org/info/rfc8446>.







Klassert & Antony         Expires 24 July 2025                  [Page 9]

Internet-Draft               KEv2 KDF Notes                 January 2025


   [RFC9611]  Antony, A., Brunner, T., Klassert, S., and P. Wouters,
              "Internet Key Exchange Protocol Version 2 (IKEv2) Support
              for Per-Resource Child Security Associations (SAs)",
              RFC 9611, DOI 10.17487/RFC9611, July 2024,
              <https://www.rfc-editor.org/info/rfc9611>.

   [RFC9681]  Decraene, B., Ginsberg, L., Li, T., Solignac, G., Karasek,
              M., Van de Velde, G., and T. Przygienda, "IS-IS Fast
              Flooding", RFC 9681, DOI 10.17487/RFC9681, November 2024,
              <https://www.rfc-editor.org/info/rfc9681>.

Authors' Addresses

   Steffen Klassert
   secunet Security Networks AG
   Email: steffen.klassert@secunet.com


   Antony Antony
   secunet Security Networks AG
   Email: antony.antony@secunet.com






























Klassert & Antony         Expires 24 July 2025                 [Page 10]
